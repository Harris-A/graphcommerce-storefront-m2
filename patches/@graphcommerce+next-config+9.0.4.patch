diff --git a/node_modules/@graphcommerce/next-config/dist/generated/config.js b/node_modules/@graphcommerce/next-config/dist/generated/config.js
index 74cee66..9669c52 100644
--- a/node_modules/@graphcommerce/next-config/dist/generated/config.js
+++ b/node_modules/@graphcommerce/next-config/dist/generated/config.js
@@ -1,135 +1,212 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.WebsitePermissionsSchema = exports.SidebarGalleryPaginationVariantSchema = exports.ProductFiltersLayoutSchema = exports.PaginationVariantSchema = exports.CustomerAccountPermissionsSchema = exports.ContainerSizingSchema = exports.CompareVariantSchema = exports.CartPermissionsSchema = exports.definedNonNullAnySchema = exports.isDefinedNonNullAny = void 0;
-exports.DatalayerConfigSchema = DatalayerConfigSchema;
-exports.GraphCommerceConfigSchema = GraphCommerceConfigSchema;
-exports.GraphCommerceDebugConfigSchema = GraphCommerceDebugConfigSchema;
-exports.GraphCommerceGooglePlaystoreConfigSchema = GraphCommerceGooglePlaystoreConfigSchema;
-exports.GraphCommercePermissionsSchema = GraphCommercePermissionsSchema;
-exports.GraphCommerceStorefrontConfigSchema = GraphCommerceStorefrontConfigSchema;
-exports.MagentoConfigurableVariantValuesSchema = MagentoConfigurableVariantValuesSchema;
-exports.RecentlyViewedProductsConfigSchema = RecentlyViewedProductsConfigSchema;
-exports.SidebarGalleryConfigSchema = SidebarGalleryConfigSchema;
-/* eslint-disable */
-const zod_1 = require("zod");
-const isDefinedNonNullAny = (v) => v !== undefined && v !== null;
-exports.isDefinedNonNullAny = isDefinedNonNullAny;
-exports.definedNonNullAnySchema = zod_1.z.any().refine((v) => (0, exports.isDefinedNonNullAny)(v));
-exports.CartPermissionsSchema = zod_1.z.enum(['CUSTOMER_ONLY', 'DISABLED', 'ENABLED']);
-exports.CompareVariantSchema = zod_1.z.enum(['CHECKBOX', 'ICON']);
-exports.ContainerSizingSchema = zod_1.z.enum(['BREAKPOINT', 'FULL_WIDTH']);
-exports.CustomerAccountPermissionsSchema = zod_1.z.enum(['DISABLED', 'DISABLE_REGISTRATION', 'ENABLED']);
-exports.PaginationVariantSchema = zod_1.z.enum(['COMPACT', 'EXTENDED']);
-exports.ProductFiltersLayoutSchema = zod_1.z.enum(['DEFAULT', 'SIDEBAR']);
-exports.SidebarGalleryPaginationVariantSchema = zod_1.z.enum(['DOTS', 'THUMBNAILS_BOTTOM']);
-exports.WebsitePermissionsSchema = zod_1.z.enum(['ENABLED']);
+/* eslint-disable */ "use strict";
+Object.defineProperty(exports, "__esModule", {
+    value: true
+});
+function _export(target, all) {
+    for(var name in all)Object.defineProperty(target, name, {
+        enumerable: true,
+        get: all[name]
+    });
+}
+_export(exports, {
+    CartPermissionsSchema: function() {
+        return CartPermissionsSchema;
+    },
+    CompareVariantSchema: function() {
+        return CompareVariantSchema;
+    },
+    ContainerSizingSchema: function() {
+        return ContainerSizingSchema;
+    },
+    CustomerAccountPermissionsSchema: function() {
+        return CustomerAccountPermissionsSchema;
+    },
+    DatalayerConfigSchema: function() {
+        return DatalayerConfigSchema;
+    },
+    GraphCommerceConfigSchema: function() {
+        return GraphCommerceConfigSchema;
+    },
+    GraphCommerceDebugConfigSchema: function() {
+        return GraphCommerceDebugConfigSchema;
+    },
+    GraphCommerceGooglePlaystoreConfigSchema: function() {
+        return GraphCommerceGooglePlaystoreConfigSchema;
+    },
+    GraphCommercePermissionsSchema: function() {
+        return GraphCommercePermissionsSchema;
+    },
+    GraphCommerceStorefrontConfigSchema: function() {
+        return GraphCommerceStorefrontConfigSchema;
+    },
+    MagentoConfigurableVariantValuesSchema: function() {
+        return MagentoConfigurableVariantValuesSchema;
+    },
+    PaginationVariantSchema: function() {
+        return PaginationVariantSchema;
+    },
+    ProductFiltersLayoutSchema: function() {
+        return ProductFiltersLayoutSchema;
+    },
+    RecentlyViewedProductsConfigSchema: function() {
+        return RecentlyViewedProductsConfigSchema;
+    },
+    SidebarGalleryConfigSchema: function() {
+        return SidebarGalleryConfigSchema;
+    },
+    SidebarGalleryPaginationVariantSchema: function() {
+        return SidebarGalleryPaginationVariantSchema;
+    },
+    WebsitePermissionsSchema: function() {
+        return WebsitePermissionsSchema;
+    },
+    definedNonNullAnySchema: function() {
+        return definedNonNullAnySchema;
+    },
+    isDefinedNonNullAny: function() {
+        return isDefinedNonNullAny;
+    }
+});
+const _zod = require("zod");
+const isDefinedNonNullAny = (v)=>v !== undefined && v !== null;
+const definedNonNullAnySchema = _zod.z.any().refine((v)=>isDefinedNonNullAny(v));
+const CartPermissionsSchema = _zod.z.enum([
+    'CUSTOMER_ONLY',
+    'DISABLED',
+    'ENABLED'
+]);
+const CompareVariantSchema = _zod.z.enum([
+    'CHECKBOX',
+    'ICON'
+]);
+const ContainerSizingSchema = _zod.z.enum([
+    'BREAKPOINT',
+    'FULL_WIDTH'
+]);
+const CustomerAccountPermissionsSchema = _zod.z.enum([
+    'DISABLED',
+    'DISABLE_REGISTRATION',
+    'ENABLED'
+]);
+const PaginationVariantSchema = _zod.z.enum([
+    'COMPACT',
+    'EXTENDED'
+]);
+const ProductFiltersLayoutSchema = _zod.z.enum([
+    'DEFAULT',
+    'SIDEBAR'
+]);
+const SidebarGalleryPaginationVariantSchema = _zod.z.enum([
+    'DOTS',
+    'THUMBNAILS_BOTTOM'
+]);
+const WebsitePermissionsSchema = _zod.z.enum([
+    'ENABLED'
+]);
 function DatalayerConfigSchema() {
-    return zod_1.z.object({
-        coreWebVitals: zod_1.z.boolean().nullish()
+    return _zod.z.object({
+        coreWebVitals: _zod.z.boolean().nullish()
     });
 }
 function GraphCommerceConfigSchema() {
-    return zod_1.z.object({
-        breadcrumbs: zod_1.z.boolean().default(false).nullish(),
-        canonicalBaseUrl: zod_1.z.string().min(1),
-        cartDisplayPricesInclTax: zod_1.z.boolean().nullish(),
-        compare: zod_1.z.boolean().nullish(),
-        compareVariant: exports.CompareVariantSchema.default("ICON").nullish(),
-        configurableVariantForSimple: zod_1.z.boolean().default(false).nullish(),
+    return _zod.z.object({
+        breadcrumbs: _zod.z.boolean().default(false).nullish(),
+        canonicalBaseUrl: _zod.z.string().min(1),
+        cartDisplayPricesInclTax: _zod.z.boolean().nullish(),
+        compare: _zod.z.boolean().nullish(),
+        compareVariant: CompareVariantSchema.default("ICON").nullish(),
+        configurableVariantForSimple: _zod.z.boolean().default(false).nullish(),
         configurableVariantValues: MagentoConfigurableVariantValuesSchema().nullish(),
-        containerSizingContent: exports.ContainerSizingSchema.default("FULL_WIDTH").nullish(),
-        containerSizingShell: exports.ContainerSizingSchema.default("FULL_WIDTH").nullish(),
-        crossSellsHideCartItems: zod_1.z.boolean().default(false).nullish(),
-        crossSellsRedirectItems: zod_1.z.boolean().default(false).nullish(),
-        customerAddressNoteEnable: zod_1.z.boolean().nullish(),
-        customerCompanyFieldsEnable: zod_1.z.boolean().nullish(),
-        customerDeleteEnabled: zod_1.z.boolean().nullish(),
-        customerXMagentoCacheIdDisable: zod_1.z.boolean().nullish(),
+        containerSizingContent: ContainerSizingSchema.default("FULL_WIDTH").nullish(),
+        containerSizingShell: ContainerSizingSchema.default("FULL_WIDTH").nullish(),
+        crossSellsHideCartItems: _zod.z.boolean().default(false).nullish(),
+        crossSellsRedirectItems: _zod.z.boolean().default(false).nullish(),
+        customerAddressNoteEnable: _zod.z.boolean().nullish(),
+        customerCompanyFieldsEnable: _zod.z.boolean().nullish(),
+        customerDeleteEnabled: _zod.z.boolean().nullish(),
+        customerXMagentoCacheIdDisable: _zod.z.boolean().nullish(),
         dataLayer: DatalayerConfigSchema().nullish(),
         debug: GraphCommerceDebugConfigSchema().nullish(),
-        demoMode: zod_1.z.boolean().default(true).nullish(),
-        enableGuestCheckoutLogin: zod_1.z.boolean().nullish(),
-        googleAnalyticsId: zod_1.z.string().nullish(),
+        enableGuestCheckoutLogin: _zod.z.boolean().nullish(),
+        googleAnalyticsId: _zod.z.string().nullish(),
         googlePlaystore: GraphCommerceGooglePlaystoreConfigSchema().nullish(),
-        googleRecaptchaKey: zod_1.z.string().nullish(),
-        googleTagmanagerId: zod_1.z.string().nullish(),
-        hygraphEndpoint: zod_1.z.string().min(1),
-        hygraphManagementApi: zod_1.z.string().nullish(),
-        hygraphProjectId: zod_1.z.string().nullish(),
-        hygraphWriteAccessToken: zod_1.z.string().nullish(),
-        limitSsg: zod_1.z.boolean().nullish(),
-        magentoEndpoint: zod_1.z.string().min(1),
-        magentoVersion: zod_1.z.number(),
+        googleRecaptchaKey: _zod.z.string().nullish(),
+        googleTagmanagerId: _zod.z.string().nullish(),
+        hygraphManagementApi: _zod.z.string().nullish(),
+        hygraphProjectId: _zod.z.string().nullish(),
+        hygraphWriteAccessToken: _zod.z.string().nullish(),
+        limitSsg: _zod.z.boolean().nullish(),
+        magentoEndpoint: _zod.z.string().min(1),
+        magentoVersion: _zod.z.number(),
         permissions: GraphCommercePermissionsSchema().nullish(),
-        previewSecret: zod_1.z.string().nullish(),
-        productFiltersLayout: exports.ProductFiltersLayoutSchema.default("DEFAULT").nullish(),
-        productFiltersPro: zod_1.z.boolean().nullish(),
-        productListPaginationVariant: exports.PaginationVariantSchema.default("COMPACT").nullish(),
-        productRoute: zod_1.z.string().nullish(),
+        previewSecret: _zod.z.string().nullish(),
+        productFiltersLayout: ProductFiltersLayoutSchema.default("DEFAULT").nullish(),
+        productFiltersPro: _zod.z.boolean().nullish(),
+        productListPaginationVariant: PaginationVariantSchema.default("COMPACT").nullish(),
+        productRoute: _zod.z.string().nullish(),
         recentlyViewedProducts: RecentlyViewedProductsConfigSchema().nullish(),
-        robotsAllow: zod_1.z.boolean().nullish(),
+        robotsAllow: _zod.z.boolean().nullish(),
         sidebarGallery: SidebarGalleryConfigSchema().nullish(),
-        storefront: zod_1.z.array(GraphCommerceStorefrontConfigSchema()),
-        wishlistHideForGuests: zod_1.z.boolean().nullish(),
-        wishlistShowFeedbackMessage: zod_1.z.boolean().nullish()
+        storefront: _zod.z.array(GraphCommerceStorefrontConfigSchema()),
+        wishlistHideForGuests: _zod.z.boolean().nullish(),
+        wishlistShowFeedbackMessage: _zod.z.boolean().nullish()
     });
 }
 function GraphCommerceDebugConfigSchema() {
-    return zod_1.z.object({
-        cart: zod_1.z.boolean().nullish(),
-        pluginStatus: zod_1.z.boolean().nullish(),
-        sessions: zod_1.z.boolean().nullish(),
-        webpackCircularDependencyPlugin: zod_1.z.boolean().nullish(),
-        webpackDuplicatesPlugin: zod_1.z.boolean().nullish()
+    return _zod.z.object({
+        cart: _zod.z.boolean().nullish(),
+        pluginStatus: _zod.z.boolean().nullish(),
+        sessions: _zod.z.boolean().nullish(),
+        webpackCircularDependencyPlugin: _zod.z.boolean().nullish(),
+        webpackDuplicatesPlugin: _zod.z.boolean().nullish()
     });
 }
 function GraphCommerceGooglePlaystoreConfigSchema() {
-    return zod_1.z.object({
-        packageName: zod_1.z.string().min(1),
-        sha256CertificateFingerprint: zod_1.z.string().min(1)
+    return _zod.z.object({
+        packageName: _zod.z.string().min(1),
+        sha256CertificateFingerprint: _zod.z.string().min(1)
     });
 }
 function GraphCommercePermissionsSchema() {
-    return zod_1.z.object({
-        cart: exports.CartPermissionsSchema.nullish(),
-        checkout: exports.CartPermissionsSchema.nullish(),
-        customerAccount: exports.CustomerAccountPermissionsSchema.nullish(),
-        website: exports.WebsitePermissionsSchema.nullish()
+    return _zod.z.object({
+        cart: CartPermissionsSchema.nullish(),
+        checkout: CartPermissionsSchema.nullish(),
+        customerAccount: CustomerAccountPermissionsSchema.nullish(),
+        website: WebsitePermissionsSchema.nullish()
     });
 }
 function GraphCommerceStorefrontConfigSchema() {
-    return zod_1.z.object({
-        canonicalBaseUrl: zod_1.z.string().nullish(),
-        cartDisplayPricesInclTax: zod_1.z.boolean().nullish(),
-        customerCompanyFieldsEnable: zod_1.z.boolean().nullish(),
-        defaultLocale: zod_1.z.boolean().nullish(),
-        domain: zod_1.z.string().nullish(),
-        googleAnalyticsId: zod_1.z.string().nullish(),
-        googleRecaptchaKey: zod_1.z.string().nullish(),
-        googleTagmanagerId: zod_1.z.string().nullish(),
-        hygraphLocales: zod_1.z.array(zod_1.z.string().min(1)).nullish(),
-        linguiLocale: zod_1.z.string().nullish(),
-        locale: zod_1.z.string().min(1),
-        magentoStoreCode: zod_1.z.string().min(1),
+    return _zod.z.object({
+        canonicalBaseUrl: _zod.z.string().nullish(),
+        cartDisplayPricesInclTax: _zod.z.boolean().nullish(),
+        customerCompanyFieldsEnable: _zod.z.boolean().nullish(),
+        defaultLocale: _zod.z.boolean().nullish(),
+        domain: _zod.z.string().nullish(),
+        googleAnalyticsId: _zod.z.string().nullish(),
+        googleRecaptchaKey: _zod.z.string().nullish(),
+        googleTagmanagerId: _zod.z.string().nullish(),
+        linguiLocale: _zod.z.string().nullish(),
+        locale: _zod.z.string().min(1),
+        magentoStoreCode: _zod.z.string().min(1),
         permissions: GraphCommercePermissionsSchema().nullish(),
-        robotsAllow: zod_1.z.boolean().nullish()
+        robotsAllow: _zod.z.boolean().nullish()
     });
 }
 function MagentoConfigurableVariantValuesSchema() {
-    return zod_1.z.object({
-        content: zod_1.z.boolean().nullish(),
-        gallery: zod_1.z.boolean().nullish(),
-        url: zod_1.z.boolean().nullish()
+    return _zod.z.object({
+        content: _zod.z.boolean().nullish(),
+        gallery: _zod.z.boolean().nullish(),
+        url: _zod.z.boolean().nullish()
     });
 }
 function RecentlyViewedProductsConfigSchema() {
-    return zod_1.z.object({
-        enabled: zod_1.z.boolean().nullish(),
-        maxCount: zod_1.z.number().nullish()
+    return _zod.z.object({
+        enabled: _zod.z.boolean().nullish(),
+        maxCount: _zod.z.number().nullish()
     });
 }
 function SidebarGalleryConfigSchema() {
-    return zod_1.z.object({
-        paginationVariant: exports.SidebarGalleryPaginationVariantSchema.nullish()
+    return _zod.z.object({
+        paginationVariant: SidebarGalleryPaginationVariantSchema.nullish()
     });
 }
diff --git a/node_modules/@graphcommerce/next-config/src/generated/config.ts b/node_modules/@graphcommerce/next-config/src/generated/config.ts
index 30a799d..c693c0f 100644
--- a/node_modules/@graphcommerce/next-config/src/generated/config.ts
+++ b/node_modules/@graphcommerce/next-config/src/generated/config.ts
@@ -198,14 +198,6 @@ export type GraphCommerceConfig = {
   dataLayer?: InputMaybe<DatalayerConfig>;
   /** Debug configuration for GraphCommerce */
   debug?: InputMaybe<GraphCommerceDebugConfig>;
-  /**
-   * Enables some demo specific code that is probably not useful for a project:
-   *
-   * - Adds the "BY GC" to the product list items.
-   * - Adds "dominant_color" attribute swatches to the product list items.
-   * - Creates a big list items in the product list.
-   */
-  demoMode?: InputMaybe<Scalars['Boolean']['input']>;
   /**
    * Enable Guest Checkout Login:
    * During customer login, GraphCommerce queries Magento to determine whether
@@ -242,14 +234,6 @@ export type GraphCommerceConfig = {
    * This value is required even if you are configuring different values for each locale.
    */
   googleTagmanagerId?: InputMaybe<Scalars['String']['input']>;
-  /**
-   * The HyGraph endpoint.
-   *
-   * > Read-only endpoint that allows low latency and high read-throughput content delivery.
-   *
-   * Project settings -> API Access -> High Performance Read-only Content API
-   */
-  hygraphEndpoint: Scalars['String']['input'];
   /**
    * Hygraph Management API. **Only used for migrations.**
    *
@@ -439,8 +423,6 @@ export type GraphCommerceStorefrontConfig = {
   googleRecaptchaKey?: InputMaybe<Scalars['String']['input']>;
   /** The Google Tagmanager ID to be used per locale. */
   googleTagmanagerId?: InputMaybe<Scalars['String']['input']>;
-  /** Add a gcms-locales header to make sure queries return in a certain language, can be an array to define fallbacks. */
-  hygraphLocales?: InputMaybe<Array<Scalars['String']['input']>>;
   /** Custom locale used to load the .po files. Must be a valid locale, also used for Intl functions. */
   linguiLocale?: InputMaybe<Scalars['String']['input']>;
   /**
@@ -568,13 +550,11 @@ export function GraphCommerceConfigSchema(): z.ZodObject<Properties<GraphCommerc
     customerXMagentoCacheIdDisable: z.boolean().nullish(),
     dataLayer: DatalayerConfigSchema().nullish(),
     debug: GraphCommerceDebugConfigSchema().nullish(),
-    demoMode: z.boolean().default(true).nullish(),
     enableGuestCheckoutLogin: z.boolean().nullish(),
     googleAnalyticsId: z.string().nullish(),
     googlePlaystore: GraphCommerceGooglePlaystoreConfigSchema().nullish(),
     googleRecaptchaKey: z.string().nullish(),
     googleTagmanagerId: z.string().nullish(),
-    hygraphEndpoint: z.string().min(1),
     hygraphManagementApi: z.string().nullish(),
     hygraphProjectId: z.string().nullish(),
     hygraphWriteAccessToken: z.string().nullish(),
@@ -632,7 +612,6 @@ export function GraphCommerceStorefrontConfigSchema(): z.ZodObject<Properties<Gr
     googleAnalyticsId: z.string().nullish(),
     googleRecaptchaKey: z.string().nullish(),
     googleTagmanagerId: z.string().nullish(),
-    hygraphLocales: z.array(z.string().min(1)).nullish(),
     linguiLocale: z.string().nullish(),
     locale: z.string().min(1),
     magentoStoreCode: z.string().min(1),
diff --git a/node_modules/@graphcommerce/next-config/src/withGraphCommerce.ts b/node_modules/@graphcommerce/next-config/src/withGraphCommerce.ts
index 51e6524..8b93cb8 100644
--- a/node_modules/@graphcommerce/next-config/src/withGraphCommerce.ts
+++ b/node_modules/@graphcommerce/next-config/src/withGraphCommerce.ts
@@ -104,7 +104,7 @@ export function withGraphCommerce(nextConfig: NextConfig, cwd: string = process.
       }
 
       if (graphcommerceConfig.productRoute && graphcommerceConfig.productRoute !== '/p/') {
-        rewrites.beforeFiles.push({
+        (rewrites.beforeFiles ??= []).push({
           source: `${graphcommerceConfig.productRoute ?? '/p/'}:path*`,
           destination: '/p/:path*',
         })
